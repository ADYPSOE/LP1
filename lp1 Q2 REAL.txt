import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

class AssemblerPass2 {

    // Symbol and Literal Tables as Maps
    private Map<String, Integer> symbolTable;
    private Map<String, Integer> literalTable;
    private ArrayList<String[]> intermediateCode;

    // Constructor to initialize with tables and IC generated from Pass 1
    public AssemblerPass2(Map<String, Integer> symbolTable, Map<String, Integer> literalTable, ArrayList<String[]> intermediateCode) {
        this.symbolTable = symbolTable;
        this.literalTable = literalTable;
        this.intermediateCode = intermediateCode;
    }

    // Function to process Pass 2 and generate final machine code
    public void generateMachineCode() {
        System.out.println("Generated Machine Code:");
        for (String[] ic : intermediateCode) {
            String instruction = ic[0];
            String opcode = ic[1];
            String operand = ic[2];
            String machineCode = "";

            switch (instruction) {
                case "IS": // Imperative Statements
                    machineCode += opcode + " ";
                    if (symbolTable.containsKey(operand)) {
                        machineCode += symbolTable.get(operand);  // Symbol address
                    } else if (literalTable.containsKey(operand)) {
                        machineCode += literalTable.get(operand);  // Literal address
                    } else {
                        machineCode += "000"; // If operand not found, default address
                    }
                    break;

                case "DL": // Declarative Statements
                    if (opcode.equals("DC")) {
                        machineCode += "00 " + operand; // Data Constant
                    } else if (opcode.equals("DS")) {
                        machineCode += "00 000"; // Data Storage, initialize with 0
                    }
                    break;

                case "AD": // Assembler Directive, skip these in Pass 2
                    continue;
            }

            // Print the machine code for this line
            System.out.println(machineCode);
        }
    }

    public static void main(String[] args) {
        // Example Symbol Table and Literal Table
        Map<String, Integer> symbolTable = new HashMap<>();
        symbolTable.put("A", 101);
        symbolTable.put("B", 102);

        Map<String, Integer> literalTable = new HashMap<>();
        literalTable.put("=5", 201);
        literalTable.put("=10", 202);

        // Example Intermediate Code generated by Pass 1
        ArrayList<String[]> intermediateCode = new ArrayList<>();
        // Format: {"Instruction Type", "Opcode", "Operand"}
        intermediateCode.add(new String[]{"IS", "01", "A"});  // Example: MOV A
        intermediateCode.add(new String[]{"IS", "04", "B"});  // Example: ADD B
        intermediateCode.add(new String[]{"DL", "DC", "5"});  // Example: DC 5
        intermediateCode.add(new String[]{"IS", "10", "=5"}); // Example: MOV =5
        intermediateCode.add(new String[]{"IS", "04", "=10"}); // Example: ADD =10

        // Initialize Pass 2 Assembler with tables and IC
        AssemblerPass2 assemblerPass2 = new AssemblerPass2(symbolTable, literalTable, intermediateCode);

        // Generate and print the machine code
        assemblerPass2.generateMachineCode();
    }
}
