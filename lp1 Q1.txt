import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssemblerPass1 {

    static Map<String, Integer> SYMTAB = new HashMap<>(); // Symbol Table
    static List<Map<String, Object>> LITTAB = new ArrayList<>(); // Literal Table
    static List<String[]> IC = new ArrayList<>(); // Intermediate Code

    static final String[] POT = {"START", "DS", "DC", "EQU", "LTORG", "ORIGIN", "END"}; // Pseudo operations
    static final Map<String, String> MOT = new HashMap<>(); // Mnemonics with opcodes

    static {
        MOT.put("MOVER", "01");
        MOT.put("ADD", "02");
        MOT.put("MOVEM", "03");
        MOT.put("PRINT", "04");
        MOT.put("STOP", "05");
    }

    public static void main(String[] args) {
        String[] assemblyCode = {
                "START 100",
                "A DS 3",
                "L1 MOVER AREG, B",
                "ADD AREG, C",
                "MOVEM AREG, D",
                "D EQU A+1",
                "L2 PRINT D",
                "ORIGIN L2+1",
                "MOVEM AREG, ='34'",
                "MOVEM AREG, ='14'",
                "LTORG",
                "STOP",
                "MOVEM AREG, ='143'",
                "MOVEM AREG, ='134'",
                "B DC '19'",
                "C DC '17'",
                "END"
        };

        pass1(assemblyCode);

        // Output Symbol Table, Literal Table, and Intermediate Code
        System.out.println("SYMTAB: " + SYMTAB);
        System.out.println("LITTAB: " + LITTAB);
        System.out.println("Intermediate Code:");
        for (String[] ic : IC) {
            System.out.println(String.join(" ", ic));
        }
    }

    private static void pass1(String[] assemblyCode) {
        int locationCounter = 0;

        for (String line : assemblyCode) {
            String[] tokens = line.trim().split("\\s+");

            if (tokens.length == 0) continue;

            // Handle START
            if (tokens[0].equals("START")) {
                locationCounter = Integer.parseInt(tokens[1]);
                IC.add(new String[]{tokens[0], tokens[1]});
                continue;
            }

            // Handle label definitions
            if (!isPseudoOperation(tokens[0]) && !MOT.containsKey(tokens[0])) {
                String label = tokens[0];
                addSymbol(label, locationCounter);
                tokens = removeFirstToken(tokens);
            }

            // Handle DS and DC
            if (tokens[0].equals("DS")) {
                addSymbol(tokens[0], locationCounter);
                locationCounter += Integer.parseInt(tokens[1]);
                IC.add(new String[]{"DS", tokens[1]});
                continue;
            }

            if (tokens[0].equals("DC")) {
                addSymbol(tokens[0], locationCounter);
                IC.add(new String[]{"DC", tokens[1]});
                locationCounter++;
                continue;
            }

            // Handle EQU
            if (tokens[0].equals("EQU")) {
                String symbol = tokens[1];
                int address = evaluateExpression(tokens[2]);
                addSymbol(symbol, address);
                IC.add(new String[]{"EQU", symbol, tokens[2]});
                continue;
            }

            // Handle ORIGIN
            if (tokens[0].equals("ORIGIN")) {
                locationCounter = evaluateExpression(tokens[1]);
                IC.add(new String[]{"ORIGIN", tokens[1]});
                continue;
            }

            // Handle LTORG and END
            if (tokens[0].equals("LTORG") || tokens[0].equals("END")) {
                locationCounter = resolveLiterals(locationCounter);
                IC.add(new String[]{tokens[0]});
                if (tokens[0].equals("END")) break;
                continue;
            }

            // Handle instructions and literals
            if (MOT.containsKey(tokens[0])) {
                String mnemonic = tokens[0];
                String operand1 = tokens[1].replace(",", "");
                String operand2 = tokens[2];

                if (operand2.startsWith("=")) {
                    addLiteral(operand2);
                }
                IC.add(new String[]{mnemonic, operand1, operand2});
                locationCounter++;
            } else {
                System.out.println("Unknown operation or directive: " + tokens[0]);
            }
        }
    }

    private static boolean isPseudoOperation(String token) {
        for (String op : POT) {
            if (op.equals(token)) return true;
        }
        return false;
    }

    private static void addSymbol(String symbol, int address) {
        SYMTAB.putIfAbsent(symbol, address);
    }

    private static void addLiteral(String literal) {
        boolean exists = LITTAB.stream().anyMatch(lit -> lit.get("name").equals(literal));
        if (!exists) {
            Map<String, Object> litEntry = new HashMap<>();
            litEntry.put("name", literal);
            litEntry.put("address", null);
            LITTAB.add(litEntry);
        }
    }

    private static int resolveLiterals(int locationCounter) {
        for (Map<String, Object> lit : LITTAB) {
            if (lit.get("address") == null) {
                lit.put("address", locationCounter);
                locationCounter++;
            }
        }
        return locationCounter;
    }

    private static int evaluateExpression(String expression) {
        String[] parts = expression.split("\\+");
        int baseAddress = SYMTAB.getOrDefault(parts[0], 0);
        int offset = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
        return baseAddress + offset;
    }

    private static String[] removeFirstToken(String[] tokens) {
        String[] newTokens = new String[tokens.length - 1];
        System.arraycopy(tokens, 1, newTokens, 0, tokens.length - 1);
        return newTokens;
    }
}
