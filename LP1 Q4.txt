import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class MacroProcessorPass2 {

    static class Macro {
        String name;
        int mdtIndex;
        List<String> parameters;

        Macro(String name, int mdtIndex, List<String> parameters) {
            this.name = name;
            this.mdtIndex = mdtIndex;
            this.parameters = parameters;
        }
    }

    private List<Macro> MNT;                 // Macro Name Table
    private List<String> MDT;                 // Macro Definition Table
    private Map<String, Integer> ALA;         // Argument List Array
    private List<String> expandedCode;        // Expanded code

    public MacroProcessorPass2(List<Macro> MNT, List<String> MDT, Map<String, Integer> ALA) {
        this.MNT = MNT;
        this.MDT = MDT;
        this.ALA = ALA;
        this.expandedCode = new ArrayList<>();
    }

    // Function to expand macros in the main code
    public void expandMacros(String[] code) {
        for (String line : code) {
            String[] tokens = line.split("\\s+");
            String keyword = tokens[0];

            // Check if the line is a macro invocation
            Macro macro = findMacro(keyword);
            if (macro != null) {
                Map<Integer, String> argumentMap = new HashMap<>();

                // Parse arguments in macro invocation and map them to ALA positions
                for (int i = 1; i < tokens.length; i++) {
                    String arg = tokens[i];
                    String[] argParts = arg.split("=");
                    if (argParts.length == 2) {
                        // If format is "param=value", set specific ALA position
                        String paramName = argParts[0];
                        String paramValue = argParts[1];
                        Integer paramPosition = ALA.get(paramName);
                        argumentMap.put(paramPosition, paramValue);
                    } else {
                        // Otherwise, assign in order
                        argumentMap.put(i - 1, tokens[i]);
                    }
                }

                // Expand macro using MDT, replace arguments
                expandMacro(macro, argumentMap);
            } else {
                // If not a macro invocation, add line to expanded code directly
                expandedCode.add(line);
            }
        }
    }

    private Macro findMacro(String name) {
        for (Macro macro : MNT) {
            if (macro.name.equals(name)) {
                return macro;
            }
        }
        return null;
    }

    private void expandMacro(Macro macro, Map<Integer, String> argumentMap) {
        int mdtIndex = macro.mdtIndex;

        while (!MDT.get(mdtIndex).equals("MEND")) {
            String line = MDT.get(mdtIndex);
            String[] tokens = line.split("\\s+");

            // Replace placeholders with actual arguments
            StringBuilder expandedLine = new StringBuilder(tokens[0]);
            for (int i = 1; i < tokens.length; i++) {
                String token = tokens[i];
                if (token.startsWith("#")) {
                    int index = Integer.parseInt(token.substring(1));
                    expandedLine.append(" ").append(argumentMap.getOrDefault(index, ""));
                } else {
                    expandedLine.append(" ").append(token);
                }
            }
            expandedCode.add(expandedLine.toString());
            mdtIndex++;
        }
    }

    // Function to display the expanded code
    public void displayExpandedCode() {
        System.out.println("Expanded Code:");
        for (String line : expandedCode) {
            System.out.println(line);
        }
    }

    public static void main(String[] args) {
        // Sample MNT, MDT, and ALA generated by Pass 1
        List<Macro> MNT = new ArrayList<>();
        List<String> MDT = new ArrayList<>();
        Map<String, Integer> ALA = new HashMap<>();

        // Sample Data for MNT, MDT, and ALA based on provided example
        MNT.add(new Macro("M1", 0, List.of("&X", "&Y", "&A", "&B")));
        MNT.add(new Macro("M2", 5, List.of("&P", "&Q", "&U", "&V")));

        MDT.add("MOVER #2, #0");
        MDT.add("ADD #2, ='1'");
        MDT.add("MOVER #3, #1");
        MDT.add("ADD #3, ='5'");
        MDT.add("MEND");

        MDT.add("MOVER #2, #0");
        MDT.add("MOVER #3, #1");
        MDT.add("ADD #2, ='15'");
        MDT.add("ADD #3, ='10'");
        MDT.add("MEND");

        ALA.put("&X", 0);
        ALA.put("&Y", 1);
        ALA.put("&A", 2);
        ALA.put("&B", 3);
        ALA.put("&P", 0);
        ALA.put("&Q", 1);
        ALA.put("&U", 2);
        ALA.put("&V", 3);

        // Sample main code with macro invocations
        String[] code = {
                "START 100",
                "M1 10, 20, &B=CREG",
                "M2 100, 200, &V=AREG, &U=BREG",
                "END"
        };

        // Initialize Pass 2 and run it on the input code
        MacroProcessorPass2 pass2 = new MacroProcessorPass2(MNT, MDT, ALA);
        pass2.expandMacros(code);

        // Display the expanded code
        pass2.displayExpandedCode();
    }
}
